{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"getting-started/","text":"Plato \u5165\u9580 Plato \u8a00\u8a9e\u3068\u306f Plato \u306f\u3001\u5b9a\u7406\u8a3c\u660e\u3092\u76ee\u7684\u3068\u3059\u308b\u3001\u5b9f\u9a13\u7684\u306a\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002\u578b\u4ed8\u304d\u30e9\u30e0\u30c0\u8a08\u7b97\u3092\u6838\u8a00\u8a9e\u306b\u7528\u3044\u3001\u518d\u5e30\u578b\u3001\u30d1\u30e9\u30e1\u30c8\u30ea\u30c3\u30af\u591a\u76f8\u3001\u9ad8\u968e\u578b\u6f14\u7b97\u5b50\u306a\u3069\u306e\u5f37\u529b\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u5099\u3048\u3066\u3044\u308b\u3002\u4efb\u610f\u968e\u306e\u591a\u76f8\u578b\u306b\u62e1\u5f35\u3055\u308c\u305f\u578b\u63a8\u8ad6\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308a\u3001\u578b\u62bd\u8c61\u30fb\u578b\u9069\u7528\u3092\u5b8c\u5168\u306b\u7701\u7565\u3067\u304d\u308b\u3002\u30d6\u30fc\u30eb\u5024\u3084\u81ea\u7136\u6570\u3001\u30ea\u30b9\u30c8\u3092\u542b\u3081\u3001\u30ea\u30c6\u30e9\u30eb\u3084\u7d44\u307f\u8fbc\u307f\u5b9a\u6570\u3092\u4e00\u5207\u6301\u305f\u305a\u3001\u95a2\u6570\u3084\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u306e\u5b9a\u7fa9\u3001\u4efb\u610f\u306e\u9805\u3092\u6301\u3064\u5909\u6570\u306e\u4eee\u5b9a\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8ff0\u3059\u308b\u3002\u305d\u306e\u305f\u3081 Plato \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30b3\u30fc\u30c9\u751f\u6210\u3092\u884c\u308f\u306a\u304f\u3068\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a55\u4fa1\u3092\u6838\u8a00\u8a9e\u306e\u30ec\u30d9\u30eb\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u3001\u578b\u691c\u67fb\u306b\u6210\u529f\u3059\u308c\u3070\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u304c\u751f\u3058\u306a\u3044\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3002\u69cb\u6587\u306f Haskell \u3084 Agda \u306b\u5f71\u97ff\u3092\u53d7\u3051\u3066\u3044\u308b\u3002","title":"\u5165\u9580"},{"location":"getting-started/#plato","text":"","title":"Plato \u5165\u9580"},{"location":"getting-started/#plato_1","text":"Plato \u306f\u3001\u5b9a\u7406\u8a3c\u660e\u3092\u76ee\u7684\u3068\u3059\u308b\u3001\u5b9f\u9a13\u7684\u306a\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308b\u3002\u578b\u4ed8\u304d\u30e9\u30e0\u30c0\u8a08\u7b97\u3092\u6838\u8a00\u8a9e\u306b\u7528\u3044\u3001\u518d\u5e30\u578b\u3001\u30d1\u30e9\u30e1\u30c8\u30ea\u30c3\u30af\u591a\u76f8\u3001\u9ad8\u968e\u578b\u6f14\u7b97\u5b50\u306a\u3069\u306e\u5f37\u529b\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u5099\u3048\u3066\u3044\u308b\u3002\u4efb\u610f\u968e\u306e\u591a\u76f8\u578b\u306b\u62e1\u5f35\u3055\u308c\u305f\u578b\u63a8\u8ad6\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308a\u3001\u578b\u62bd\u8c61\u30fb\u578b\u9069\u7528\u3092\u5b8c\u5168\u306b\u7701\u7565\u3067\u304d\u308b\u3002\u30d6\u30fc\u30eb\u5024\u3084\u81ea\u7136\u6570\u3001\u30ea\u30b9\u30c8\u3092\u542b\u3081\u3001\u30ea\u30c6\u30e9\u30eb\u3084\u7d44\u307f\u8fbc\u307f\u5b9a\u6570\u3092\u4e00\u5207\u6301\u305f\u305a\u3001\u95a2\u6570\u3084\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u306e\u5b9a\u7fa9\u3001\u4efb\u610f\u306e\u9805\u3092\u6301\u3064\u5909\u6570\u306e\u4eee\u5b9a\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8ff0\u3059\u308b\u3002\u305d\u306e\u305f\u3081 Plato \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30b3\u30fc\u30c9\u751f\u6210\u3092\u884c\u308f\u306a\u304f\u3068\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a55\u4fa1\u3092\u6838\u8a00\u8a9e\u306e\u30ec\u30d9\u30eb\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u3001\u578b\u691c\u67fb\u306b\u6210\u529f\u3059\u308c\u3070\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u304c\u751f\u3058\u306a\u3044\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3002\u69cb\u6587\u306f Haskell \u3084 Agda \u306b\u5f71\u97ff\u3092\u53d7\u3051\u3066\u3044\u308b\u3002","title":"Plato \u8a00\u8a9e\u3068\u306f"},{"location":"getting-started/installation/","text":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bd\u30fc\u30b9\u306e\u5165\u624b Github \u304b\u3089 $ git clone https://github.com/ksrky/Plato.git Building and Installing Stack \u3092\u4f7f\u3063\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3002\u30d0\u30fc\u30b8\u30e7\u30f3\u306f 2.7.5 \u306e\u307f\u3067\u30c6\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u3002 Stack \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 $ cd Plato $ stack install $ plato --version","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"getting-started/installation/#_1","text":"","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"getting-started/installation/#_2","text":"Github \u304b\u3089 $ git clone https://github.com/ksrky/Plato.git","title":"\u30bd\u30fc\u30b9\u306e\u5165\u624b"},{"location":"getting-started/installation/#building-and-installing","text":"Stack \u3092\u4f7f\u3063\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3002\u30d0\u30fc\u30b8\u30e7\u30f3\u306f 2.7.5 \u306e\u307f\u3067\u30c6\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u3002 Stack \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 $ cd Plato $ stack install $ plato --version","title":"Building and Installing"},{"location":"getting-started/tutorial/","text":"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb Plato \u306f\u6a19\u6e96\u3067\u3001libs/base \u914d\u4e0b\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3002 \u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002 \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\uff08examples/fibonacci.plt\uff09 import Plato.Nat fib : Nat -> Nat fib n = case n of Zero -> Zero Succ n' -> case n' of Zero -> Succ Zero Succ n'' -> fib n'' + fib n' fib (Succ (Succ (Succ (Succ Zero)))) 1 \u884c\u76ee\u3067 fib \u95a2\u6570\u306e\u578b\u3092\u6ce8\u91c8\u3057\u30012 \u884c\u76ee\u4ee5\u964d\u3001fib \u95a2\u6570\u306e\u9805\u3092\u8a18\u8ff0\u3059\u308b\u3002 Plato \u3067\u306f\u3001Haskell \u306e\u3088\u3046\u306a\u30ec\u30a4\u30a2\u30a6\u30c8\u898f\u5247\u3092\u6301\u305f\u306a\u3044\u305f\u3081\u3001\u30d6\u30ec\u30fc\u30b9\u3084\u884c\u672b\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 main \u95a2\u6570\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308a\u3001\u8a08\u7b97\u7d50\u679c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u51fa\u529b\u3059\u308b\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u306f plato run <file name> \u3067\u5b9f\u884c\u3067\u304d\u308b\u3002 $ plato run examples/fibonacci.plt Succ (Succ (Succ Zero))","title":"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"},{"location":"getting-started/tutorial/#_1","text":"Plato \u306f\u6a19\u6e96\u3067\u3001libs/base \u914d\u4e0b\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3002 \u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002","title":"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"},{"location":"getting-started/tutorial/#examplesfibonacciplt","text":"import Plato.Nat fib : Nat -> Nat fib n = case n of Zero -> Zero Succ n' -> case n' of Zero -> Succ Zero Succ n'' -> fib n'' + fib n' fib (Succ (Succ (Succ (Succ Zero)))) 1 \u884c\u76ee\u3067 fib \u95a2\u6570\u306e\u578b\u3092\u6ce8\u91c8\u3057\u30012 \u884c\u76ee\u4ee5\u964d\u3001fib \u95a2\u6570\u306e\u9805\u3092\u8a18\u8ff0\u3059\u308b\u3002 Plato \u3067\u306f\u3001Haskell \u306e\u3088\u3046\u306a\u30ec\u30a4\u30a2\u30a6\u30c8\u898f\u5247\u3092\u6301\u305f\u306a\u3044\u305f\u3081\u3001\u30d6\u30ec\u30fc\u30b9\u3084\u884c\u672b\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 main \u95a2\u6570\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308a\u3001\u8a08\u7b97\u7d50\u679c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u51fa\u529b\u3059\u308b\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u306f plato run <file name> \u3067\u5b9f\u884c\u3067\u304d\u308b\u3002 $ plato run examples/fibonacci.plt Succ (Succ (Succ Zero))","title":"\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\uff08examples/fibonacci.plt\uff09"},{"location":"implementation-notes/","text":"\u5b9f\u88c5\u4e0a\u306e\u8b70\u8ad6","title":"\u5b9f\u88c5\u4e0a\u306e\u8b70\u8ad6"},{"location":"implementation-notes/#_1","text":"","title":"\u5b9f\u88c5\u4e0a\u306e\u8b70\u8ad6"},{"location":"implementation-notes/compiler-structure/","text":"\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u6210","title":"\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u6210"},{"location":"implementation-notes/compiler-structure/#_1","text":"","title":"\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u6210"},{"location":"language-reference/","text":"\u8a00\u8a9e\u4ed5\u69d8","title":"\u8a00\u8a9e\u4ed5\u69d8"},{"location":"language-reference/#_1","text":"","title":"\u8a00\u8a9e\u4ed5\u69d8"},{"location":"language-reference/core-language/","text":"\u30b3\u30a2\u8a00\u8a9e \u30b3\u30a2\u8a00\u8a9e\u306e\u69cb\u6587 \\begin{align*} t::\\: & & & \\textsf{term:} \\\\ & x & & \\textsf{variable} \\\\ & t\\:t & & \\textsf{application} \\\\ & \\lambda x.\\:t & & \\textsf{abstraction} \\\\ & t\\:T & & \\textsf{type application} \\\\ & \\Lambda X.\\:t & & \\textsf{type abstraction} \\\\ & \\texttt{let}\\:x\\:\\texttt{=}\\:t\\:\\texttt{in}\\:t & & \\textsf{let expression} \\\\ & \\texttt{fix}\\:t & & \\textsf{fix combinator} \\\\ & t.x & & \\textsf{projection} \\\\ & \\{x_i\\:\\texttt{=}\\:t_i\\}^{i \\in 1..n} & & \\textsf{record} \\\\ & \\texttt{<}x\\:\\{t_i\\}^{i \\in 1..n} : T \\texttt{>} & & \\textsf{tag value} \\\\ & \\texttt{case}\\:t\\:\\texttt{of}\\:\\{k_i\\:\\rightarrow\\:t_i\\}^{i \\in 1..n} & & \\textsf{case expression} \\\\ & \\texttt{fold}\\:T\\:t & & \\textsf{fold} \\\\ & \\texttt{unfold}\\:T\\:t & & \\textsf{unfold} \\\\ \\\\ T::\\: & & & \\textsf{type:} \\\\ & X & & \\textsf{type variable} \\\\ & T \\rightarrow T & & \\textsf{type of functions} \\\\ & \\forall X:K.\\:T & & \\textsf{universal type} \\\\ & T\\:T & & \\textsf{operator application} \\\\ & \\lambda X:K.\\:T & & \\textsf{operator abstraction} \\\\ & \\mu X:K.\\:T & & \\textsf{recursive type} \\\\ & \\{x_i : T_i\\}^{i \\in 1..n} & & \\textsf{type of record} \\\\ & \\{x_i: \\{T_j\\}^{j \\in 1..M_i}\\}^{i \\in 1..n} & & \\textsf{variant type} \\\\ \\\\ K::\\: & & & \\textsf{kind:} \\\\ & * & & \\textsf{kind of proper types} \\\\ & K \\rightarrow K & & \\textsf{kind of operators} \\\\ \\\\ \\Gamma::\\: & & & \\textsf{context:} \\\\ & \\varnothing & & \\textsf{empty context} \\\\ & \\Gamma,\\:x : T & & \\textsf{variable binding} \\\\ & \\Gamma,\\:x : T = t & & \\textsf{function binding} \\\\ & \\Gamma,\\:X : K = T & & \\textsf{type binding} \\end{align*} \\begin{align*} t::\\: & & & \\textsf{term:} \\\\ & x & & \\textsf{variable} \\\\ & t\\:t & & \\textsf{application} \\\\ & \\lambda x.\\:t & & \\textsf{abstraction} \\\\ & t\\:T & & \\textsf{type application} \\\\ & \\Lambda X.\\:t & & \\textsf{type abstraction} \\\\ & \\texttt{let}\\:x\\:\\texttt{=}\\:t\\:\\texttt{in}\\:t & & \\textsf{let expression} \\\\ & \\texttt{fix}\\:t & & \\textsf{fix combinator} \\\\ & t.x & & \\textsf{projection} \\\\ & \\{x_i\\:\\texttt{=}\\:t_i\\}^{i \\in 1..n} & & \\textsf{record} \\\\ & \\texttt{<}x\\:\\{t_i\\}^{i \\in 1..n} : T \\texttt{>} & & \\textsf{tag value} \\\\ & \\texttt{case}\\:t\\:\\texttt{of}\\:\\{k_i\\:\\rightarrow\\:t_i\\}^{i \\in 1..n} & & \\textsf{case expression} \\\\ & \\texttt{fold}\\:T\\:t & & \\textsf{fold} \\\\ & \\texttt{unfold}\\:T\\:t & & \\textsf{unfold} \\\\ \\\\ T::\\: & & & \\textsf{type:} \\\\ & X & & \\textsf{type variable} \\\\ & T \\rightarrow T & & \\textsf{type of functions} \\\\ & \\forall X:K.\\:T & & \\textsf{universal type} \\\\ & T\\:T & & \\textsf{operator application} \\\\ & \\lambda X:K.\\:T & & \\textsf{operator abstraction} \\\\ & \\mu X:K.\\:T & & \\textsf{recursive type} \\\\ & \\{x_i : T_i\\}^{i \\in 1..n} & & \\textsf{type of record} \\\\ & \\{x_i: \\{T_j\\}^{j \\in 1..M_i}\\}^{i \\in 1..n} & & \\textsf{variant type} \\\\ \\\\ K::\\: & & & \\textsf{kind:} \\\\ & * & & \\textsf{kind of proper types} \\\\ & K \\rightarrow K & & \\textsf{kind of operators} \\\\ \\\\ \\Gamma::\\: & & & \\textsf{context:} \\\\ & \\varnothing & & \\textsf{empty context} \\\\ & \\Gamma,\\:x : T & & \\textsf{variable binding} \\\\ & \\Gamma,\\:x : T = t & & \\textsf{function binding} \\\\ & \\Gamma,\\:X : K = T & & \\textsf{type binding} \\end{align*} \u30e2\u30b8\u30e5\u30fc\u30eb \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u69cb\u6587 \\begin{align*} M::\\:\\Gamma\\:\\times\\:\\{t_i : T_i\\}^{i \\in 1..n} \\end{align*} \\begin{align*} M::\\:\\Gamma\\:\\times\\:\\{t_i : T_i\\}^{i \\in 1..n} \\end{align*} \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9 \\frac{\\Gamma_0 \\vdash M}{\\Gamma_0,\\:\\Gamma \\vdash \\{t_i : T_i\\}^{i \\in 1..n}}{\\:\\text{E-Module}} \\frac{\\Gamma_0 \\vdash M}{\\Gamma_0,\\:\\Gamma \\vdash \\{t_i : T_i\\}^{i \\in 1..n}}{\\:\\text{E-Module}} Commands \u6838\u8a00\u8a9e\u306b\u304a\u3044\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306f Commands \u3068\u3044\u3046\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3055\u308c\u308b\u3002 Commands \u306f\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3001\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u8a18\u9332\u3001\u305d\u3057\u3066\u3001main \u95a2\u6570\u304b\u3089\u306a\u308b\u3002main \u95a2\u6570\u306f\u3001Let \u5f0f\u3067\u8868\u3055\u308c\u3001\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u304c\u675f\u7e1b\u306b\u3001\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u73fe\u308c\u308b main \u95a2\u6570\u306e\u9805\u304c Let \u5f0f\u306e\u672c\u4f53\u306b\u5f53\u3066\u3089\u308c\u308b\u3002\u3053\u306e\u3088\u3046\u306b\u7ffb\u8a33\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u76f8\u4e92\u518d\u5e30\u95a2\u6570\u304c\u6271\u3044\u3084\u3059\u304f\u306a\u308b\u3002 \u5909\u6570\u306f\u62bd\u8c61\u3055\u308c\u305f\u8b58\u5225\u5b50\u306e\u76f8\u5bfe\u4f4d\u7f6e\u3068\u3057\u3066\u81ea\u7136\u6570\u3067\u8868\u3055\u308c\u308b\u3002\u3053\u308c\u3092 de Bruijn \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3044\u3046\u3002 \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6587\u8108\uff08Context\uff09\u306b\u5927\u57df\u7684\u306b\u4fdd\u6301\u3055\u308c\u3001 \u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306e\u3069\u3053\u3067\u3082\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"\u30b3\u30a2\u8a00\u8a9e"},{"location":"language-reference/core-language/#_1","text":"","title":"\u30b3\u30a2\u8a00\u8a9e"},{"location":"language-reference/core-language/#_2","text":"\\begin{align*} t::\\: & & & \\textsf{term:} \\\\ & x & & \\textsf{variable} \\\\ & t\\:t & & \\textsf{application} \\\\ & \\lambda x.\\:t & & \\textsf{abstraction} \\\\ & t\\:T & & \\textsf{type application} \\\\ & \\Lambda X.\\:t & & \\textsf{type abstraction} \\\\ & \\texttt{let}\\:x\\:\\texttt{=}\\:t\\:\\texttt{in}\\:t & & \\textsf{let expression} \\\\ & \\texttt{fix}\\:t & & \\textsf{fix combinator} \\\\ & t.x & & \\textsf{projection} \\\\ & \\{x_i\\:\\texttt{=}\\:t_i\\}^{i \\in 1..n} & & \\textsf{record} \\\\ & \\texttt{<}x\\:\\{t_i\\}^{i \\in 1..n} : T \\texttt{>} & & \\textsf{tag value} \\\\ & \\texttt{case}\\:t\\:\\texttt{of}\\:\\{k_i\\:\\rightarrow\\:t_i\\}^{i \\in 1..n} & & \\textsf{case expression} \\\\ & \\texttt{fold}\\:T\\:t & & \\textsf{fold} \\\\ & \\texttt{unfold}\\:T\\:t & & \\textsf{unfold} \\\\ \\\\ T::\\: & & & \\textsf{type:} \\\\ & X & & \\textsf{type variable} \\\\ & T \\rightarrow T & & \\textsf{type of functions} \\\\ & \\forall X:K.\\:T & & \\textsf{universal type} \\\\ & T\\:T & & \\textsf{operator application} \\\\ & \\lambda X:K.\\:T & & \\textsf{operator abstraction} \\\\ & \\mu X:K.\\:T & & \\textsf{recursive type} \\\\ & \\{x_i : T_i\\}^{i \\in 1..n} & & \\textsf{type of record} \\\\ & \\{x_i: \\{T_j\\}^{j \\in 1..M_i}\\}^{i \\in 1..n} & & \\textsf{variant type} \\\\ \\\\ K::\\: & & & \\textsf{kind:} \\\\ & * & & \\textsf{kind of proper types} \\\\ & K \\rightarrow K & & \\textsf{kind of operators} \\\\ \\\\ \\Gamma::\\: & & & \\textsf{context:} \\\\ & \\varnothing & & \\textsf{empty context} \\\\ & \\Gamma,\\:x : T & & \\textsf{variable binding} \\\\ & \\Gamma,\\:x : T = t & & \\textsf{function binding} \\\\ & \\Gamma,\\:X : K = T & & \\textsf{type binding} \\end{align*} \\begin{align*} t::\\: & & & \\textsf{term:} \\\\ & x & & \\textsf{variable} \\\\ & t\\:t & & \\textsf{application} \\\\ & \\lambda x.\\:t & & \\textsf{abstraction} \\\\ & t\\:T & & \\textsf{type application} \\\\ & \\Lambda X.\\:t & & \\textsf{type abstraction} \\\\ & \\texttt{let}\\:x\\:\\texttt{=}\\:t\\:\\texttt{in}\\:t & & \\textsf{let expression} \\\\ & \\texttt{fix}\\:t & & \\textsf{fix combinator} \\\\ & t.x & & \\textsf{projection} \\\\ & \\{x_i\\:\\texttt{=}\\:t_i\\}^{i \\in 1..n} & & \\textsf{record} \\\\ & \\texttt{<}x\\:\\{t_i\\}^{i \\in 1..n} : T \\texttt{>} & & \\textsf{tag value} \\\\ & \\texttt{case}\\:t\\:\\texttt{of}\\:\\{k_i\\:\\rightarrow\\:t_i\\}^{i \\in 1..n} & & \\textsf{case expression} \\\\ & \\texttt{fold}\\:T\\:t & & \\textsf{fold} \\\\ & \\texttt{unfold}\\:T\\:t & & \\textsf{unfold} \\\\ \\\\ T::\\: & & & \\textsf{type:} \\\\ & X & & \\textsf{type variable} \\\\ & T \\rightarrow T & & \\textsf{type of functions} \\\\ & \\forall X:K.\\:T & & \\textsf{universal type} \\\\ & T\\:T & & \\textsf{operator application} \\\\ & \\lambda X:K.\\:T & & \\textsf{operator abstraction} \\\\ & \\mu X:K.\\:T & & \\textsf{recursive type} \\\\ & \\{x_i : T_i\\}^{i \\in 1..n} & & \\textsf{type of record} \\\\ & \\{x_i: \\{T_j\\}^{j \\in 1..M_i}\\}^{i \\in 1..n} & & \\textsf{variant type} \\\\ \\\\ K::\\: & & & \\textsf{kind:} \\\\ & * & & \\textsf{kind of proper types} \\\\ & K \\rightarrow K & & \\textsf{kind of operators} \\\\ \\\\ \\Gamma::\\: & & & \\textsf{context:} \\\\ & \\varnothing & & \\textsf{empty context} \\\\ & \\Gamma,\\:x : T & & \\textsf{variable binding} \\\\ & \\Gamma,\\:x : T = t & & \\textsf{function binding} \\\\ & \\Gamma,\\:X : K = T & & \\textsf{type binding} \\end{align*}","title":"\u30b3\u30a2\u8a00\u8a9e\u306e\u69cb\u6587"},{"location":"language-reference/core-language/#_3","text":"","title":"\u30e2\u30b8\u30e5\u30fc\u30eb"},{"location":"language-reference/core-language/#_4","text":"\\begin{align*} M::\\:\\Gamma\\:\\times\\:\\{t_i : T_i\\}^{i \\in 1..n} \\end{align*} \\begin{align*} M::\\:\\Gamma\\:\\times\\:\\{t_i : T_i\\}^{i \\in 1..n} \\end{align*}","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u69cb\u6587"},{"location":"language-reference/core-language/#_5","text":"\\frac{\\Gamma_0 \\vdash M}{\\Gamma_0,\\:\\Gamma \\vdash \\{t_i : T_i\\}^{i \\in 1..n}}{\\:\\text{E-Module}} \\frac{\\Gamma_0 \\vdash M}{\\Gamma_0,\\:\\Gamma \\vdash \\{t_i : T_i\\}^{i \\in 1..n}}{\\:\\text{E-Module}}","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9"},{"location":"language-reference/core-language/#commands","text":"\u6838\u8a00\u8a9e\u306b\u304a\u3044\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306f Commands \u3068\u3044\u3046\u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3055\u308c\u308b\u3002 Commands \u306f\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3001\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u8a18\u9332\u3001\u305d\u3057\u3066\u3001main \u95a2\u6570\u304b\u3089\u306a\u308b\u3002main \u95a2\u6570\u306f\u3001Let \u5f0f\u3067\u8868\u3055\u308c\u3001\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u304c\u675f\u7e1b\u306b\u3001\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u73fe\u308c\u308b main \u95a2\u6570\u306e\u9805\u304c Let \u5f0f\u306e\u672c\u4f53\u306b\u5f53\u3066\u3089\u308c\u308b\u3002\u3053\u306e\u3088\u3046\u306b\u7ffb\u8a33\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u76f8\u4e92\u518d\u5e30\u95a2\u6570\u304c\u6271\u3044\u3084\u3059\u304f\u306a\u308b\u3002 \u5909\u6570\u306f\u62bd\u8c61\u3055\u308c\u305f\u8b58\u5225\u5b50\u306e\u76f8\u5bfe\u4f4d\u7f6e\u3068\u3057\u3066\u81ea\u7136\u6570\u3067\u8868\u3055\u308c\u308b\u3002\u3053\u308c\u3092 de Bruijn \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3044\u3046\u3002 \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6587\u8108\uff08Context\uff09\u306b\u5927\u57df\u7684\u306b\u4fdd\u6301\u3055\u308c\u3001 \u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306e\u3069\u3053\u3067\u3082\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"Commands"},{"location":"language-reference/declarations/","text":"\u5ba3\u8a00 \u95a2\u6570\u5ba3\u8a00 \u95a2\u6570\u5ba3\u8a00\u306f\u3001\u95a2\u6570\u672c\u4f53\u3068\u578b\u7f72\u540d\u304b\u3089\u306a\u308b\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u3053\u308c\u3089\u306f\u3069\u3053\u306b\u914d\u7f6e\u3055\u308c\u3066\u3082\u3088\u3044\u3057\u3001\u524d\u5f8c\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u3066\u3082\u554f\u984c\u306a\u3044\u304c\u3001\u578b\u7f72\u540d\u306e\u8a18\u8ff0\u306f\u5fc5\u9808\u3068\u306a\u308b\u3002\u4f8b\uff1a not : Bool -> Bool not = \\b -> case b of True -> False False -> True \u5f0f\u306e\u5148\u982d\u3067\u30e9\u30e0\u30c0\u62bd\u8c61\u3055\u308c\u305f\u5909\u6570\u306f = \u306e\u5de6\u5074\u306b\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002 not : Bool -> Bool not b = case b of True -> False False -> True \u5165\u529b\u3092\u30d1\u30bf\u30fc\u30f3\u3067\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u95a2\u6570\u672c\u4f53\u306f\u5fc5\u305a\u4e00\u672c\u306e\u5f0f\u306b\u306a\u308b\u3002 \u5909\u6570\u5ba3\u8a00 \u95a2\u6570\u5ba3\u8a00\u306b\u304a\u3044\u3066\u3001\u95a2\u6570\u672c\u4f53\u304c\u6b20\u843d\u3059\u308b\u3068\u3001\u5909\u6570\u5ba3\u8a00\u3068\u306a\u308b\u3002\u4f8b\uff1a anything : {a} a \u5909\u6570\u306f\u5f0f\u306e\u4e2d\u3067\u578b\u691c\u67fb\u306f\u3067\u304d\u3066\u3082\u3001\u8a55\u4fa1\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u305d\u306e\u6587\u5b57\u5217\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\u4f8b\uff1a double : Nat -> Nat double m = anything double (Succ Zero) -- anything \u5909\u6570\u306e\u578b\u304c\u3088\u308a\u5177\u4f53\u7684\u306b\u5206\u304b\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u306f\u3001\u95a2\u6570\u672c\u4f53\u306e\u8a18\u8ff0\u3092\u4fdd\u7559\u3059\u308b\u3088\u3046\u306a\u6271\u3044\u65b9\u304c\u3067\u304d\u308b\u3002 plus : Nat -> Nat -> Nat double : Nat -> Nat double m = plus m m \u5909\u6570\u306f Haskell \u306b\u304a\u3051\u308b undefined \u306b\u4f3c\u3066\u3044\u308b\u304c\u3001\u7570\u306a\u308b\u70b9\u306f\u3001Plato \u3067\u306f\u5909\u6570\u306b\u51fa\u4f1a\u3063\u3066\u3082\u8a55\u4fa1\u3092\u505c\u6b62\u305b\u305a\u3001\u305d\u306e\u540d\u524d\u3092\u8fd4\u3057\u3001\u307e\u305f\u3001\u578b\u3092\u3088\u308a\u5177\u4f53\u5316\u3067\u304d\u308b\u70b9\u3067\u3042\u308b\u3002","title":"\u5ba3\u8a00"},{"location":"language-reference/declarations/#_1","text":"","title":"\u5ba3\u8a00"},{"location":"language-reference/declarations/#_2","text":"\u95a2\u6570\u5ba3\u8a00\u306f\u3001\u95a2\u6570\u672c\u4f53\u3068\u578b\u7f72\u540d\u304b\u3089\u306a\u308b\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u3053\u308c\u3089\u306f\u3069\u3053\u306b\u914d\u7f6e\u3055\u308c\u3066\u3082\u3088\u3044\u3057\u3001\u524d\u5f8c\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u3066\u3082\u554f\u984c\u306a\u3044\u304c\u3001\u578b\u7f72\u540d\u306e\u8a18\u8ff0\u306f\u5fc5\u9808\u3068\u306a\u308b\u3002\u4f8b\uff1a not : Bool -> Bool not = \\b -> case b of True -> False False -> True \u5f0f\u306e\u5148\u982d\u3067\u30e9\u30e0\u30c0\u62bd\u8c61\u3055\u308c\u305f\u5909\u6570\u306f = \u306e\u5de6\u5074\u306b\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002 not : Bool -> Bool not b = case b of True -> False False -> True \u5165\u529b\u3092\u30d1\u30bf\u30fc\u30f3\u3067\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u95a2\u6570\u672c\u4f53\u306f\u5fc5\u305a\u4e00\u672c\u306e\u5f0f\u306b\u306a\u308b\u3002","title":"\u95a2\u6570\u5ba3\u8a00"},{"location":"language-reference/declarations/#_3","text":"\u95a2\u6570\u5ba3\u8a00\u306b\u304a\u3044\u3066\u3001\u95a2\u6570\u672c\u4f53\u304c\u6b20\u843d\u3059\u308b\u3068\u3001\u5909\u6570\u5ba3\u8a00\u3068\u306a\u308b\u3002\u4f8b\uff1a anything : {a} a \u5909\u6570\u306f\u5f0f\u306e\u4e2d\u3067\u578b\u691c\u67fb\u306f\u3067\u304d\u3066\u3082\u3001\u8a55\u4fa1\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u305d\u306e\u6587\u5b57\u5217\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\u4f8b\uff1a double : Nat -> Nat double m = anything double (Succ Zero) -- anything \u5909\u6570\u306e\u578b\u304c\u3088\u308a\u5177\u4f53\u7684\u306b\u5206\u304b\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u306f\u3001\u95a2\u6570\u672c\u4f53\u306e\u8a18\u8ff0\u3092\u4fdd\u7559\u3059\u308b\u3088\u3046\u306a\u6271\u3044\u65b9\u304c\u3067\u304d\u308b\u3002 plus : Nat -> Nat -> Nat double : Nat -> Nat double m = plus m m \u5909\u6570\u306f Haskell \u306b\u304a\u3051\u308b undefined \u306b\u4f3c\u3066\u3044\u308b\u304c\u3001\u7570\u306a\u308b\u70b9\u306f\u3001Plato \u3067\u306f\u5909\u6570\u306b\u51fa\u4f1a\u3063\u3066\u3082\u8a55\u4fa1\u3092\u505c\u6b62\u305b\u305a\u3001\u305d\u306e\u540d\u524d\u3092\u8fd4\u3057\u3001\u307e\u305f\u3001\u578b\u3092\u3088\u308a\u5177\u4f53\u5316\u3067\u304d\u308b\u70b9\u3067\u3042\u308b\u3002","title":"\u5909\u6570\u5ba3\u8a00"},{"location":"language-reference/expressions/","text":"\u5f0f expr : lexpr op expr | lexpr lexpr : '\\\\' var vars '->' expr | 'let' '{' decls '}' 'in' expr | 'case' expr 'of' '{' alts '}' | fexpr fexpr : fexpr aexpr | aexpr aexpr : '(' expr ')' | '(' lexpr op ')' | varid | conid \u95a2\u6570\u9069\u7528 let \u5f0f case \u5f0f alts : alt ';' alts | alt | {- empty -} alt : pat '->' expr pat : lpat consym pat | lpat lpat : conid apats | apat apats : apat apats | apat apat : '(' pat ')' | conid | varid | '_' \u30e9\u30e0\u30c0\u5f0f \u4e2d\u7f6e\u5f0f","title":"\u5f0f"},{"location":"language-reference/expressions/#_1","text":"expr : lexpr op expr | lexpr lexpr : '\\\\' var vars '->' expr | 'let' '{' decls '}' 'in' expr | 'case' expr 'of' '{' alts '}' | fexpr fexpr : fexpr aexpr | aexpr aexpr : '(' expr ')' | '(' lexpr op ')' | varid | conid","title":"\u5f0f"},{"location":"language-reference/expressions/#_2","text":"","title":"\u95a2\u6570\u9069\u7528"},{"location":"language-reference/expressions/#let","text":"","title":"let \u5f0f"},{"location":"language-reference/expressions/#case","text":"alts : alt ';' alts | alt | {- empty -} alt : pat '->' expr pat : lpat consym pat | lpat lpat : conid apats | apat apats : apat apats | apat apat : '(' pat ')' | conid | varid | '_'","title":"case \u5f0f"},{"location":"language-reference/expressions/#_3","text":"","title":"\u30e9\u30e0\u30c0\u5f0f"},{"location":"language-reference/expressions/#_4","text":"","title":"\u4e2d\u7f6e\u5f0f"},{"location":"language-reference/lexical-structure/","text":"","title":"\u5b57\u53e5\u69cb\u9020"},{"location":"language-reference/program-structure/","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u69cb\u9020 \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5ba3\u8a00 \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5ba3\u8a00\u3067\u304d\u308b\u306e\u306f\u3001\u30c7\u30fc\u30bf\u578b\u3001\u578b\u30b7\u30ce\u30cb\u30e0\u3001\u95a2\u6570\u3001\u5909\u6570\u3001\u6f14\u7b97\u5b50\u3001 \u6f14\u7b97\u5b50\u306e\u7d50\u5408\u6027\u306e\u5b9a\u7fa9\u3067\u3042\u308b\u3002 \u30c7\u30fc\u30bf\u578b List \u578b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u304b\u3051\u308b\u3002 \u578b\u53ca\u3073\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5927\u6587\u5b57\u3001\u578b\u5909\u6570\u306f\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 data List a = Nil | Cons a (List a); \u578b\u30b7\u30ce\u30cb\u30e0 \u578b\u306e\u5225\u540d\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u304b\u3051\u308b\u3002 NatList = List Nat; \u95a2\u6570 \u95a2\u6570\u5ba3\u8a00\u306f\u9805\u3068\u3068\u3082\u306b\u578b\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 not : Bool -> Bool not b = case b of True -> False False -> True \u5909\u6570 \u95a2\u6570\u5ba3\u8a00\u306b\u304a\u3044\u3066\u9805\u306e\u5b9a\u7fa9\u304c\u6b20\u843d\u3059\u308b\u3068\u3001\u5909\u6570\u5ba3\u8a00\u3068\u306a\u308b\u3002 p : A -> B \u95a2\u6570\u306e\u578b\u7f72\u540d\u3092\u547d\u984c\u3068\u307f\u306a\u305b\u3070\u3001\u9805\u306e\u90e8\u5206\u304c\u305d\u306e\u547d\u984c\u306e\u8a3c\u660e\u3068\u306a\u308b\u305f\u3081\u3001 \u5909\u6570\u5ba3\u8a00\u306f\u3001\u8ad6\u7406\u5b66\u7684\u306b\u306f\u516c\u7406\u3042\u308b\u3044\u306f\u4eee\u5b9a\u3068\u307f\u306a\u305b\u308b\u3002 Haskell \u306b\u304a\u3044\u3066\u540c\u69d8\u306e\u3053\u3068\u3092\u5b9f\u73fe\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001 p = undefined \u3092\u8ffd\u52a0\u3059\u308b\u3002 \u6f14\u7b97\u5b50 \u6f14\u7b97\u5b50\u306f\u7d50\u5408\u6027\u306e\u5b9a\u7fa9\u3068\u3068\u3082\u306b\u8a18\u8ff0\u3059\u308b\u3002\u7d50\u5408\u306e\u5f37\u3055\u306f 0 \u304b\u3089 9 \u307e\u3067\u306e\u6574\u6570\u5024\u3067\u3042\u308b\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5de6\u7d50\u5408\u3067\u6700\u5927\u306e\u7d50\u5408\u529b\u3092\u6301\u3064\u3002 infixl 6 + (+) : Nat -> Nat -> Nat (+) m n = case m of Zero -> n Succ m` -> Succ (m` + n) \u5f0f let \u5f0f let { decls } in expr case \u5f0f case expr of { alts } \u4e2d\u7f6e\u5f0f expr op expr \u95a2\u6570\u3001\u5909\u6570 f x y ... \u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf K a b ... \u578b \u5168\u79f0\u578b { a b ... } type \u95a2\u6570\u578b type -> type \u578b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf T a b ...","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u9020"},{"location":"language-reference/program-structure/#_1","text":"","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u69cb\u9020"},{"location":"language-reference/program-structure/#_2","text":"\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5ba3\u8a00\u3067\u304d\u308b\u306e\u306f\u3001\u30c7\u30fc\u30bf\u578b\u3001\u578b\u30b7\u30ce\u30cb\u30e0\u3001\u95a2\u6570\u3001\u5909\u6570\u3001\u6f14\u7b97\u5b50\u3001 \u6f14\u7b97\u5b50\u306e\u7d50\u5408\u6027\u306e\u5b9a\u7fa9\u3067\u3042\u308b\u3002","title":"\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5ba3\u8a00"},{"location":"language-reference/program-structure/#_3","text":"List \u578b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u304b\u3051\u308b\u3002 \u578b\u53ca\u3073\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5927\u6587\u5b57\u3001\u578b\u5909\u6570\u306f\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 data List a = Nil | Cons a (List a);","title":"\u30c7\u30fc\u30bf\u578b"},{"location":"language-reference/program-structure/#_4","text":"\u578b\u306e\u5225\u540d\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u304b\u3051\u308b\u3002 NatList = List Nat;","title":"\u578b\u30b7\u30ce\u30cb\u30e0"},{"location":"language-reference/program-structure/#_5","text":"\u95a2\u6570\u5ba3\u8a00\u306f\u9805\u3068\u3068\u3082\u306b\u578b\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002 not : Bool -> Bool not b = case b of True -> False False -> True","title":"\u95a2\u6570"},{"location":"language-reference/program-structure/#_6","text":"\u95a2\u6570\u5ba3\u8a00\u306b\u304a\u3044\u3066\u9805\u306e\u5b9a\u7fa9\u304c\u6b20\u843d\u3059\u308b\u3068\u3001\u5909\u6570\u5ba3\u8a00\u3068\u306a\u308b\u3002 p : A -> B \u95a2\u6570\u306e\u578b\u7f72\u540d\u3092\u547d\u984c\u3068\u307f\u306a\u305b\u3070\u3001\u9805\u306e\u90e8\u5206\u304c\u305d\u306e\u547d\u984c\u306e\u8a3c\u660e\u3068\u306a\u308b\u305f\u3081\u3001 \u5909\u6570\u5ba3\u8a00\u306f\u3001\u8ad6\u7406\u5b66\u7684\u306b\u306f\u516c\u7406\u3042\u308b\u3044\u306f\u4eee\u5b9a\u3068\u307f\u306a\u305b\u308b\u3002 Haskell \u306b\u304a\u3044\u3066\u540c\u69d8\u306e\u3053\u3068\u3092\u5b9f\u73fe\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001 p = undefined \u3092\u8ffd\u52a0\u3059\u308b\u3002","title":"\u5909\u6570"},{"location":"language-reference/program-structure/#_7","text":"\u6f14\u7b97\u5b50\u306f\u7d50\u5408\u6027\u306e\u5b9a\u7fa9\u3068\u3068\u3082\u306b\u8a18\u8ff0\u3059\u308b\u3002\u7d50\u5408\u306e\u5f37\u3055\u306f 0 \u304b\u3089 9 \u307e\u3067\u306e\u6574\u6570\u5024\u3067\u3042\u308b\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5de6\u7d50\u5408\u3067\u6700\u5927\u306e\u7d50\u5408\u529b\u3092\u6301\u3064\u3002 infixl 6 + (+) : Nat -> Nat -> Nat (+) m n = case m of Zero -> n Succ m` -> Succ (m` + n)","title":"\u6f14\u7b97\u5b50"},{"location":"language-reference/program-structure/#_8","text":"let \u5f0f let { decls } in expr case \u5f0f case expr of { alts } \u4e2d\u7f6e\u5f0f expr op expr \u95a2\u6570\u3001\u5909\u6570 f x y ... \u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf K a b ...","title":"\u5f0f"},{"location":"language-reference/program-structure/#_9","text":"\u5168\u79f0\u578b { a b ... } type \u95a2\u6570\u578b type -> type \u578b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf T a b ...","title":"\u578b"},{"location":"language-reference/recursive-function/","text":"\u518d\u5e30\u95a2\u6570 \u95a2\u6570\u306f\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3084 Let \u5f0f\u306e\u675f\u7e1b\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3055\u308c\u308b\u3002 iseven : Nat -> Bool iseven n = case n of Zero -> True Succ n' -> isodd n' isodd : Nat -> Bool isodd n = case n of Zero -> False Succ n' -> iseven n' main : Bool main = iseven (Succ (Succ Zero)) \u3053\u308c\u306f\u6838\u8a00\u8a9e\u306b\u304a\u3044\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u73fe\u3055\u308c\u308b\u3002 let r = fix (\\ieio: {iseven: Nat -> Bool, isodd: Nat -> Bool}. { iseven = \\ case n of Zero -> True Succ n' -> isodd n' , isodd n = case n of Zero -> False Succ n' -> iseven n' }) in r.iseven (Succ (Succ Zero))","title":"\u518d\u5e30\u95a2\u6570"},{"location":"language-reference/recursive-function/#_1","text":"\u95a2\u6570\u306f\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3084 Let \u5f0f\u306e\u675f\u7e1b\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3055\u308c\u308b\u3002 iseven : Nat -> Bool iseven n = case n of Zero -> True Succ n' -> isodd n' isodd : Nat -> Bool isodd n = case n of Zero -> False Succ n' -> iseven n' main : Bool main = iseven (Succ (Succ Zero)) \u3053\u308c\u306f\u6838\u8a00\u8a9e\u306b\u304a\u3044\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u73fe\u3055\u308c\u308b\u3002 let r = fix (\\ieio: {iseven: Nat -> Bool, isodd: Nat -> Bool}. { iseven = \\ case n of Zero -> True Succ n' -> isodd n' , isodd n = case n of Zero -> False Succ n' -> iseven n' }) in r.iseven (Succ (Succ Zero))","title":"\u518d\u5e30\u95a2\u6570"},{"location":"language-reference/types/","text":"\u578b type : '{' tyvar tyvars '}' type | btype '->' type | btype btype : btype atype | atype atype : '(' type ')' | conid | varid \u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0 \\begin{align*} \\sigma_{i+1} &= \\sigma_i\\,|\\,\\sigma_i \\rightarrow \\sigma_{i+1} \\\\ \\sigma_0 &= \\tau \\end{align*} \\begin{align*} \\sigma_{i+1} &= \\sigma_i\\,|\\,\\sigma_i \\rightarrow \\sigma_{i+1} \\\\ \\sigma_0 &= \\tau \\end{align*} \u30c7\u30fc\u30bf\u578b data Bool = True | False \u4e00\u822c\u5f62 datatype : 'data' conid | 'data' conid '=' constrs constrs : constr '|' constrs | constr constr : conid types","title":"\u578b"},{"location":"language-reference/types/#_1","text":"type : '{' tyvar tyvars '}' type | btype '->' type | btype btype : btype atype | atype atype : '(' type ')' | conid | varid","title":"\u578b"},{"location":"language-reference/types/#_2","text":"\\begin{align*} \\sigma_{i+1} &= \\sigma_i\\,|\\,\\sigma_i \\rightarrow \\sigma_{i+1} \\\\ \\sigma_0 &= \\tau \\end{align*} \\begin{align*} \\sigma_{i+1} &= \\sigma_i\\,|\\,\\sigma_i \\rightarrow \\sigma_{i+1} \\\\ \\sigma_0 &= \\tau \\end{align*}","title":"\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0"},{"location":"language-reference/types/#_3","text":"data Bool = True | False","title":"\u30c7\u30fc\u30bf\u578b"},{"location":"language-reference/types/#_4","text":"datatype : 'data' conid | 'data' conid '=' constrs constrs : constr '|' constrs | constr constr : conid types","title":"\u4e00\u822c\u5f62"}]}