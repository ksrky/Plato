data Nat where
    Z : Nat
    S : Nat -> Nat

infixl 6 +
infixl 6 -
infixl 7 *

(+) : Nat -> Nat -> Nat
Z + n = n
S m + n = S (m + n)

(-) : Nat -> Nat -> Nat
Z - n = Z
m - Z = m
S m - S n = m - n

(*) : Nat -> Nat -> Nat
Z * n = Z
S m * n = n + m * n  

negate : Nat -> Nat
negate Z = Z
negate (S n) = n

infix 4 ==
infix 4 <
infix 4 <=
infix 4 >
infix 4 >=

(==) : Nat -> Nat -> Bool
S m == S n = m == n
S _ == Z = False
Z == S _ = False
Z == Z = True

(<) : Nat -> Nat -> Bool
S m < S n = m < n
Z < S _ = True
_ < Z = False

(<=) : Nat -> Nat -> Bool
S m <= n = m < n
Z <= n = True

(>) : Nat -> Nat -> Bool
S m > S n =  m > n
S _ > Z = True
Z > n = False

(>=) : Nat -> Nat -> Bool
m >= (S n) = m > n
m >= Z = True