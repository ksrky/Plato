import Function
import Bool
import Nat
import Maybe
import Pair

infixr 5 ::
infixr 5 ++

data List a where
    Nil : List a
    (::) : a -> List a -> List a

(++) : {a} List a -> List a -> List a
Nil ++ m = m
(x :: xs) ++ m = x :: (xs ++ m)

head : {a} List a -> Maybe a
head Nil = Nothing
head (hd :: _) = Just hd

last : {a} List a -> Maybe a
last Nil = Nothing
last (hd :: Nil) = Just hd
last (_ :: tl) = last tl

tail : {a} List a -> List a
tail Nil = Nil
tail (_ :: tl) = tl

cons : {a} a -> List a -> List a
cons = (::)

uncons : {a} List a -> Maybe (a :,: List a)
uncons Nil = Nothing
uncons (x :: xs) = Just (x :,: xs)

{-
init : {a} List a -> List a
init Nil = Nil
init {a} (x :: xs) =
    let init' : a -> List a -> List a -- error : Scoped type variables
        init' y Nil = Nil
        init' y (z :: zs) = y :: init' z zs
     in init' x xs
-}

null : {a} List a -> Bool
null Nil = True
null _ = False

length : {a} List a -> Nat
length Nil = Z
length (x :: xs) = S (length xs)

map : {a b} (a -> b) -> List a -> List b
map _ Nil = Nil
map f (x :: xs) = f x :: map f xs

reverse : {a} List a -> List a
reverse l =
    let rev : {a} List a -> List a -> List a
        rev Nil a = a
        rev (x :: xs) a = rev xs (x :: a)
     in rev l Nil

filter : {a} (a -> Bool) -> List a -> List a
filter _ Nil = Nil
filter f (x :: xs) = ifThenElse (f x) (x :: filter f xs) (filter f xs)

foldl : {a b} (b -> a -> b) -> b -> List a -> b
foldl _ v Nil = v
foldl f v (x :: xs) = foldl f (f v x) xs

foldr : {a b} (a -> b -> b) -> b -> List a -> b
foldr _ v Nil = v
foldr f v (x :: xs) = f x (foldr f v xs)

zip : {a b} List a -> List b -> List (a :,: b)
zip Nil _ = Nil
zip _ Nil = Nil
zip (x :: xs) (y :: ys) = (x :,: y) :: zip xs ys

zipWith : {a b c} (a -> b -> c) -> List a -> List b -> List c
zipWith _ Nil _ = Nil
zipWith _ _ Nil = Nil
zipWith f (x :: xs) (y :: ys) = f x y :: zipWith f xs ys

unzip : {a b} List (a :,: b) -> List a :,: List b
unzip = foldr (\(x :,: y) (xs :,: ys) -> x :: xs :,: y :: ys) (Nil :,: Nil)

elemBy : {a} (a -> a -> Bool) -> a -> List a -> Bool
elemBy _ _ Nil = False
elemBy eq y (x :: xs) = eq x y || elemBy eq y xs

{-
nubBy : {a} (a -> a -> Bool) -> List a -> List a
nubBy eq Nil = Nil
nubBy eq (x :: xs) = x :: nubBy eq (filter (\y -> not (eq x y)) xs)
nubBy {a} eq l =
    let nubBy' : List a -> List a -> List a
        nubBy' Nil _ = Nil
        nubBy' (y :: ys) xs = case elemBy eq y xs of
            True -> nubBy' ys xs
            False -> y :: nubBy' ys (y :: xs)
    in nubBy' l Nil

unionBy : {a} (a -> a -> Bool) -> List a -> List a -> List a
unionBy eq xs ys = xs ++ foldl (flip (deleteBy eq)) (nubBy eq ys) xs
-}

deleteBy : {a} (a -> a -> Bool) -> a -> List a -> List a
deleteBy _ _ Nil = Nil
deleteBy eq x (y :: ys) = case eq x y of
    True -> ys
    False -> y :: deleteBy eq x ys