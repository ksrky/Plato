{-
dependencies:
  base:
    - Function
    - Maybe
    - Either
    - Pair
-}

-- ####################### --
-- Monad
data Monad m where
    Monad : ({a} a -> m a)
         -> ({a b} m a -> (a -> m b) -> m b)
         -> Monad m

return : {m} Monad m -> {a} a -> m a
return (Monad ret _) = ret

bind : {m} Monad m -> {a b} m a -> (a -> m b) -> m b
bind (Monad _ bnd) = bnd

-- Monad instance of Maybe
maybeMonad : Monad Maybe
maybeMonad = Monad
    Just
    (\m f -> case m of
        Just x -> f x
        Nothing -> Nothing)

maybeReturn : {a} a -> Maybe a
maybeReturn = return maybeMonad

maybeBind : {a b} Maybe a -> (a -> Maybe b) -> Maybe b
maybeBind = bind maybeMonad

-- Monad instance of Either
eitherMonad : {e} Monad (Either e)
eitherMonad = Monad
    Right
    (\m f -> case m of
        Right x -> f x
        Left e -> Left e)

eitherReturn : {a e} a -> Either e a
eitherReturn = return eitherMonad

eitherBind : {a b e} Either e a -> (a -> Either e b) -> Either e b
eitherBind = bind eitherMonad

-- ####################### --
-- MonadState
data MonadState s m where
    MonadState : Monad m
              -> m s
              -> (s -> m Unit)
              -> MonadState s m

stateMonad : {s m} MonadState s m -> Monad m
stateMonad (MonadState monad _ _) = monad

get : {s m} MonadState s m -> m s
get (MonadState _ g _) = g

put : {s m} MonadState s m -> s -> m Unit
put (MonadState _ _ p) = p

state : {s m a} MonadState s m -> (s -> a :,: s) -> m a
state monadst f =
    let (>>=) = bind (stateMonad monadst)
        infixl 1 >>=
     in get monadst
            >>= \s -> case f s of
                a :,: s' -> put monadst s >>= \_ -> return (stateMonad monadst) a

modify : {s m} MonadState s m -> (s -> s) -> m Unit
modify monadst f = state monadst (\s -> (Unit :,: f s))

gets : {s m a} MonadState s m -> (s -> a) -> m a
gets monadst f = let monad = stateMonad monadst
                  in bind monad (get monadst) (return monad . f)

-- ####################### --
-- MonadWriter
data MonadWriter w m where
    MonadWriter : Monad m 
               -> ({a} a :,: w -> m a)
               -> ({a} m a -> m (a :,: w))
               -> MonadWriter w m

writerMonad (MonadWriter monad _ _) = monad

writer : {w m} MonadWriter w m -> {a} a :,: w -> m a
writer (MonadWriter _ wr ls) = wr

listen : {w m} MonadWriter w m -> {a} m a -> m (a :,: w)
listen (MonadWriter _ _ ls) = ls

tell : {w m} MonadWriter w m -> w -> m Unit
tell monadwr w = writer monadwr (Unit :,: w)

listens : {w m a b} MonadWriter w m -> (w -> b) -> m a -> m (a :,: b)
listens monadwr f m =
    bind
        (writerMonad monadwr)
        (listen monadwr m)
        (\(a :,: w) -> return (writerMonad monadwr) (a :,: f w))

-- ####################### --
-- MonadReader
data MonadReader r m where
    MonadReader : Monad m
               -> m r
               -> ({a} (r -> r) -> m a -> m a)
               -> MonadReader r m

readerMonad : {r m} MonadReader r m -> Monad m
readerMonad (MonadReader monad _ _) = monad

ask : {r m} MonadReader r m -> m r
ask (MonadReader _ a _) = a

local : {r m} MonadReader r m -> {a} (r -> r) -> m a -> m a
local (MonadReader _ _ l) = l

reader : {r m}  MonadReader r m -> {a} (r -> a) -> m a
reader monadrd f =
    bind
        (readerMonad monadrd)
        (ask monadrd) 
        (return (readerMonad monadrd) . f)