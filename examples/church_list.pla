import Function
import List

data ChurchList a where
    ChurchList : ({r} (a -> r -> r) -> r -> r) -> ChurchList a

runList : {a} ChurchList a -> ({r} (a -> r -> r) -> r -> r)
runList (ChurchList xs) = xs

fromList : {a} List a -> ChurchList a
fromList = ChurchList . foldr

toList : {a} ChurchList a -> List a
toList xs = runList xs (::) Nil

nil : {a} ChurchList a
nil = ChurchList (\_ z -> z)

cons : {a} a -> ChurchList a -> ChurchList a
cons x xs = ChurchList (\k z -> k x (runList xs k z))

append : {a} ChurchList a -> ChurchList a -> ChurchList a
append xs ys = ChurchList (\k z -> runList xs k (runList ys k z))

singleton : {a} a -> ChurchList a
singleton x = ChurchList (\k z -> k x z)

snoc : {a} ChurchList a -> a -> ChurchList a
snoc xs x = ChurchList (\k z -> runList xs k (k x z))